function [trainedClassifier, validationAccuracy] = continuosToDiscrete(trainingData)
% trainClassifier(trainingData)
%  returns a trained classifier and its validation accuracy.
%  This code recreates the classification model trained in
%  Classification Learner app.
%
%   Input:
%       trainingData: the training data of same data type as imported
%        in the app (table or matrix).
%
%   Output:
%       trainedClassifier: a struct containing the trained classifier.
%        The struct contains various fields with information about the
%        trained classifier.
%
%       trainedClassifier.predictFcn: a function to make predictions
%        on new data. It takes an input of the same form as this training
%        code (table or matrix) and returns predictions for the response.
%        If you supply a matrix, include only the predictors columns (or
%        rows).
%
%       validationAccuracy: a double containing the validation accuracy
%        score in percent. In the app, the History list displays this
%        overall accuracy score for each model.
%
%  Use the code to train the model with new data.
%  To retrain your classifier, call the function from the command line
%  with your original data or new data as the input argument trainingData.
%
%  For example, to retrain a classifier trained with the original data set
%  T, enter:
%    [trainedClassifier, validationAccuracy] = trainClassifier(T)
%
%  To make predictions with the returned 'trainedClassifier' on new data T,
%  use
%    yfit = trainedClassifier.predictFcn(T)
%
%  To automate training the same classifier with new data, or to learn how
%  to programmatically train classifiers, examine the generated code.

% Auto-generated by MATLAB on 21-Jan-2016 16:04:28


% Convert input to table
inputTable = table(trainingData');
inputTable.Properties.VariableNames = {'row'};

% Split matrices in the input table into vectors
inputTable.row_1 = inputTable.row(:,1);
inputTable.row_2 = inputTable.row(:,2);

% Extract predictors and response
% This code processes the data into the right shape for training the
% classifier.
predictorNames = {'row_1'};
predictors = inputTable(:, predictorNames);
response = inputTable.row_2;

% Train a classifier
% This code specifies all the classifier options and trains the classifier.
classificationKNN = fitcknn(...
    predictors, ...
    response, ...
    'Distance', 'Euclidean', ...
    'Exponent', [], ...
    'NumNeighbors', 1, ...
    'DistanceWeight', 'Equal', ...
    'Standardize', true, ...
    'ClassNames', [0; 1]);

trainedClassifier.ClassificationKNN = classificationKNN;
convertMatrixToTableFcn = @(x) table(x', 'VariableNames', {'row'});
splitMatricesInTableFcn = @(t) [t(:,setdiff(t.Properties.VariableNames, {'row'})), array2table(table2array(t(:,{'row'})), 'VariableNames', {'row_1'})];
extractPredictorsFromTableFcn = @(t) t(:, predictorNames);
predictorExtractionFcn = @(x) extractPredictorsFromTableFcn(splitMatricesInTableFcn(convertMatrixToTableFcn(x)));
knnPredictFcn = @(x) predict(classificationKNN, x);
trainedClassifier.predictFcn = @(x) knnPredictFcn(predictorExtractionFcn(x));
% Convert input to table
inputTable = table(trainingData');
inputTable.Properties.VariableNames = {'row'};

% Split matrices in the input table into vectors
inputTable.row_1 = inputTable.row(:,1);
inputTable.row_2 = inputTable.row(:,2);

% Extract predictors and response
% This code processes the data into the right shape for training the
% classifier.
predictorNames = {'row_1'};
predictors = inputTable(:, predictorNames);
response = inputTable.row_2;


% Perform cross-validation
partitionedModel = crossval(trainedClassifier.ClassificationKNN, 'KFold', 5);

% Compute validation accuracy
validationAccuracy = 1 - kfoldLoss(partitionedModel, 'LossFun', 'ClassifError');

% Compute validation predictions and scores
[validationPredictions, validationScores] = kfoldPredict(partitionedModel);